parameters:
- name: projectPath
  type: string
  default: ''
- name: resourceGroupServiceConnection
  type: string
  default: ''
- name: keyVaultName
  type: string
  default: ''
- name: luisAuthoringKeySecretName
  type: string
  default: ''
- name: luisEndpointKeySecretName
  type: string
  default: ''
steps:
- task: AzureKeyVault@1
  displayName: Get Secrets
  inputs:
    azureSubscription: '${{parameters.resourceGroupServiceConnection}}'
    KeyVaultName: '${{parameters.keyVaultName}}'
    SecretsFilter: '*'
    RunAsPreJob: false
- task: AzureCLI@2
  displayName: Get Azure Account details
  inputs:
    azureSubscription: '${{parameters.resourceGroupServiceConnection}}'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: 'az account get-access-token > access.json'
    useGlobalConfig: true
- task: Bash@3
  displayName: Publish Luis and Set App Configuration
  inputs:
    targetType: 'inline'
    script: |
      token=$( jq '.accessToken' access.json)
      subId=$( jq '.subscription' access.json)
      echo "we can use $token and $subId" to do this!"

      # set key in app settings
      jq '.luis.endpointKey = "$(${{parameters.luisEndpointKeySecretName}})"' ${{parameters.projectPath}}/settings/appsettings.json > ${{parameters.projectPath}}/settings/appsettings.json.tmp
      rm ${{parameters.projectPath}}/settings/appsettings.json
      mv ${{parameters.projectPath}}/settings/appsettings.json.tmp ${{parameters.projectPath}}/settings/appsettings.json

      # get bf-cli
      npm i -g @microsoft/botframework-cli

      # delete empty lu and lg files
      find ${{parameters.projectPath}} -type f -name "*.lg" -empty -delete
      find ${{parameters.projectPath}} -type f -name "*.lu" -empty -delete

      # publish luis app and extract json from response
      bf luis:build --botName $(jq -r '.luis.name' ${{parameters.projectPath}}/settings/appsettings.json) --authoringKey $(${{parameters.luisAuthoringKeySecretName}}) --region $(jq -r '.luis.authoringRegion' ${{parameters.projectPath}}/settings/appsettings.json) --in ${{parameters.projectPath}} --out ${{parameters.projectPath}}/generated --dialog=multiLanguage
      
      # merge resulting generated settings into the appsettings file
      jq -s '.[0] * .[1]' generated/*.json settings/appsettings.json > ${{parameters.projectPath}}/settings/appsettings.json.tmp
      rm ${{parameters.projectPath}}/settings/appsettings.json
      mv ${{parameters.projectPath}}/settings/appsettings.json.tmp ${{parameters.projectPath}}/settings/appsettings.json

      # Now we need to assign the endpoint key to all of the luis apps
      # get an array of the luis app names/ids in the form [[name,id],[name,id]]
      # jq '.luis' generated/*.json | jq 'to_entries | map([.value])' | jq '.[][0]' | while IFS= read -r line ; do bf:luis:application:assignazureaccount --accountName= --appId=$line --armToken=; done
      jq '.luis' generated/*.json | jq 'to_entries | map([.value])' | jq '.[][0]' | while IFS= read -r line ; do echo "this is $line with ${{ azAccessToken.accessToken}}"; done
